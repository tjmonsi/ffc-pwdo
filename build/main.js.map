{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./app/node_modules/@littleq/state-manager/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./app/node_modules/global/window.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./app/node_modules/redux/es/index.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./app/node_modules/@polymer/polymer/polymer-element.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./app/node_modules/redux/es/createStore.js","webpack:///./app/node_modules/lodash-es/isPlainObject.js","webpack:///./app/node_modules/lodash-es/_Symbol.js","webpack:///./app/node_modules/redux/es/utils/warning.js","webpack:///./app/node_modules/redux/es/compose.js","webpack:///./app/node_modules/@littleq/littleq-router/lib/reducer.js","webpack:///./app/node_modules/path-to-regexp/index.js","webpack:///./app/node_modules/@littleq/location-mixin/index.js","webpack:///./app/node_modules/@littleq/query-params-mixin/index.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/debounce.js","webpack:///./app/node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./app/shell/index.js","webpack:///./app/system/core/components/lazy-loader.js","webpack:///./app/system/core/fragments/index.js","webpack:///./app/node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./app/node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./app/node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./app/node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./app/node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./app/node_modules/lodash-es/_baseGetTag.js","webpack:///./app/node_modules/lodash-es/_root.js","webpack:///./app/node_modules/lodash-es/_freeGlobal.js","webpack:///./app/node_modules/lodash-es/_getRawTag.js","webpack:///./app/node_modules/lodash-es/_objectToString.js","webpack:///./app/node_modules/lodash-es/_getPrototype.js","webpack:///./app/node_modules/lodash-es/_overArg.js","webpack:///./app/node_modules/lodash-es/isObjectLike.js","webpack:///./app/node_modules/symbol-observable/index.js","webpack:///./app/node_modules/symbol-observable/lib/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./app/node_modules/symbol-observable/lib/ponyfill.js","webpack:///./app/node_modules/redux/es/combineReducers.js","webpack:///./app/node_modules/redux/es/bindActionCreators.js","webpack:///./app/node_modules/redux/es/applyMiddleware.js","webpack:///./app/node_modules/@littleq/state-manager/mixins/polymer-redux.js","webpack:///./app/node_modules/@littleq/littleq-router/index.js","webpack:///./app/node_modules/@littleq/littleq-router/littleq-router.js","webpack:///./app/node_modules/@littleq/littleq-router/lib/get-animation-event.js","webpack:///./app/node_modules/@littleq/location-mixin/lib/reducer.js","webpack:///./app/node_modules/@littleq/location-mixin/lib/resolve-url.js","webpack:///./app/node_modules/@littleq/query-params-mixin/lib/reducer.js","webpack:///./app/node_modules/@littleq/littleq-router/littleq-route.js","webpack:///./app/node_modules/@littleq/littleq-router/lib/get-routes.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","installedModules","14","__webpack_require__","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","error","Error","request","undefined","setTimeout","appendChild","all","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","s","JSCompiler_renameProperty","prop","obj","_redux","_polymerRedux","initial","store","createStore","state","arguments","ReduxMixin","_polymerRedux2","default","reducers","g","this","Function","eval","_typeof","dedupeId","MixinFunction","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","base","baseSet","map","extended","set","mixinSet","win","global","self","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","u","URL","pathname","href","location","implementation","createHTMLDocument","anchor","body","resolveCss","cssText","replace","pre","post","pathFromUrl","substring","lastIndexOf","combineReducers","bindActionCreators","applyMiddleware","compose","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","len","cb","splice","observe","characterData","timeOut","after","delay","run","fn","cancel","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","handle","cancelIdleCallback","microTask","callback","textContent","idx","dashToCamelCase","dash","caseMap","indexOf","DASH_TO_CAMEL","toUpperCase","camelToDashCase","camel","CAMEL_TO_DASH","toLowerCase","Element","ElementMixin","HTMLElement","isPath","path","isAncestor","isDescendant","normalize","Array","isArray","parts","args","toString","split","j","join","root","dotIndex","translate","newBase","matches","info","part","last","isDeep","_resolveUrl","settings","useShadow","ShadyDOM","useNativeCSSProperties","Boolean","ShadyCSS","nativeCss","useNativeCustomElements","customElements","polyfillWrapFlushCallback","Settings","rootPath","setRootPath","sanitizeDOMValue","setSanitizeDOMValue","newSanitizeDOMValue","reducer","preloadedState","enhancer","_ref2","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","index","dispatch","action","_isPlainObject2","listeners","ActionTypes","INIT","replaceReducer","nextReducer","$$observable","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","objectTag","funcProto","objectProto","funcToString","objectCtorString","_isObjectLike2","_baseGetTag2","proto","_getPrototype2","Ctor","constructor","_root","message","_len","funcs","_key","arg","reduce","a","b","apply","_stateManager","ROUTER_ACTION","PARAMS","ROUTE","router","assign","params","route","pathToRegexp","parse","compile","str","options","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","res","tokens","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","escaped","offset","prev","capture","group","modifier","k","partial","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","encode","encodeURIComponent","token","segment","String","flags","sensitive","keys","strict","end","endsWith","concat","isEndDelimited","groups","source","match","regexpToRegexp","arrayToRegexp","stringToRegexp","_reducer","superClass","_ReduxMixin","_class","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","_boundHashChanged","_hashChanged","_boundUrlChanged","_urlChanged","_boundGlobalOnClick","_globalOnClick","_inherits","_createClass","statePath","query","urlSpaceRegex","hash","dwellTime","Number","_urlSpaceRegExp","computed","_lastChangedAt","_initialized","_get","addEventListener","performance","now","removeEventListener","LOCATION_ACTION","HASH","decodeURIComponent","_dontUpdateUrl","PATH","QUERY","search","_updateUrl","partiallyEncodedPath","encodeURI","partiallyEncodedQuery","partiallyEncodedHash","newUrl","_getUrl","fullNewUrl","_resolveUrl2","protocol","host","shouldReplace","history","replaceState","pushState","dispatchEvent","CustomEvent","defaultPrevented","_getSameOriginLinkHref","preventDefault","button","metaKey","ctrlKey","eventPath","composedPath","element","tagName","ga","top","origin","normalizedHref","paramsObject","_dontReact","paramsString","QUERYPARAMS_ACTION","UPDATE","_decodeParams","_encodeParams","encodedParams","paramString","paramList","param","Debouncer","_asyncModule","_callback","_timer","asyncModule","isActive","debouncer","setConfig","_mixin","_path","_caseMap","_propertyAccessors","_templateStamp","_settings","CaseMap","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","ensureOwnEffectMap","model","effects","protoFx","instFx","runEffects","inst","props","oldProps","hasPaths","extraArgs","ran","id","runEffectsForProperty","fxs","fx","lastRun","pathMatchesTrigger","trigger","triggerPath","structured","wildcard","runObserverEffect","methodName","changedProp","__data","dynamicFn","warn","notifyPath","rootProperty","dispatchNotifyEvent","eventName","detail","queueProperty","runNotifyEffect","runReflectEffect","attrName","_propertyToAttribute","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__dataHasAccessor","_setPendingProperty","addBinding","templateInfo","nodeInfo","kind","literal","bindings","binding","isCompound","shouldAddListener","_binding$parts$","negate","listenerEvent","listenerNegate","nodeInfoList","compoundIndex","addEffectForBindingPart","dependencies","evaluator","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","node","_setPendingPropertyOrPath","_enqueueClient","storage","__dataCompoundStorage","localName","computeBindingValue","_valueToNodeAttribute","_setUnmanagedPropertyToNode","applyBindingValue","_evaluateBinding","setupCompoundStorage","literals","addNotifyListener","fromProp","toPath","fromPath","_invalidateProperties","handleNotification","createMethodEffect","sig","effectFn","static","_addPropertyEffect","context","_methodHost","values","v","baseChanged","marshalArgs","emptyArray","bindingRegex","OPEN_BRACKET","literalFromParts","parseMethod","expression","trim","argList","rawArg","parseArgs","fc","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","PropertyEffects","propertyEffectsBase","TemplateStamp","PropertyAccessors","_propertyEffectsBase","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataHost","__dataTemp","__dataClientsInitialized","__dataPending","__dataOld","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__dataCounter","__templateInfo","hostStack","registerHost","readOnly","effect","_createPropertyAccessor","_hasPropertyEffect","shouldNotify","isPathNotification","old","links","link","computeLinkedPaths","prevProps","_shouldPropertyChange","__dataReady","_flushProperties","client","__enableOrFlushClients","_readyClients","clients","__dataEnabled","_enableProperties","setReadOnly","_flushClients","currentProps","changedProps","computeEffects","inputProps","runComputedEffects","notifyProps","_propagatePropertyChanges","notified","runNotifyEffects","propertyEffects","nextTemplateInfo","to","from","items","ret","hadLength","pop","start","deleteCount","Math","floor","_len2","_key2","_len3","_key3","unshift","propPath","protectedSetter","_setProperty","attr","template","instanceBinding","_parseTemplate","wasPreBound","__templateInfoLast","previousTemplateInfo","beginHosting","dom","endHosting","_bindTemplate","nodes","childNodes","firstChild","nextSibling","setupBindings","parentNode","removeChild","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReadOnlyProperty","_createReflectedProperty","_createComputedProperty","hostProps","noted","nodeType","Node","TEXT_NODE","_parseBindings","origName","removeAttribute","text","lastIndex","customEvent","notifyEvent","colon","signature","dynamicFns","stack","stackLen","Typekit","load","async","log","_fragments","_window","LazyLoader","fragments","is","define","page-home","then","page-speakers","page-schedule","page-sessions","page-sponsor","page-tickets","page-about","page-faq","page-convince","page-not-authorized","page-not-found","_regLog","register","dumpRegistrations","registrations","forEach","caseMap$0","_styleGather","_domModule","_propertyEffects","polymerElementBase","ownPropertiesForClass","klass","__ownProperties","properties","propertiesForClass","__classProperties","flattenedProps","flattenProperties","superCtor","PolymerElement","finalizeClassAndSuper","finalize","__finalized","createPropertyFromConfig","finalizeProperties","observers","__ownObservers","ownObserversForClass","finalizeObservers","innerHTML","cloneNode","_template","finalizeClass","allProps","_hasReadOnlyEffect","reflectToAttribute","_hasReflectEffect","notify","_hasNotifyEffect","_polymerElementBase","_importPath","importPath","$","list","__observedAttributes","DomModule","import","assetpath","instanceCount","__polymerFinalized","ext","cssFromModuleImports","cssFromTemplate","style","content","insertBefore","prepareTemplate","finalizeTemplate","rootPath$0","p$","__classPropertyDefaults","propertyDefaultsForClass","_hasAccessor","styleElement","_stampTemplate","_attachDom","attachShadow","shadowRoot","_attributeToProperty","styleSubtree","updateStyles","styleDocument","cssFromModules","cssFromModule","importModule","_cssFromModuleImports","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","PolymerDomModule","moduleIds","_cssText","querySelector","e$","querySelectorAll","include","getAttribute","importDoc","container","lcModules","__assetpath","owner","HTMLImports","importForElement","ownerDocument","selector","findModule","microtask","nativeProperties","getOwnPropertyNames","_superClass","__serializing","__dataInvalid","__dataProto","__dataInstanceProps","_initializeProperties","a$","observedAttributes","_initializeProtoProperties","attribute","hasAttribute","_deserializeValue","_serializeValue","Date","JSON","stringify","x","outValue","saveAccessorValue","changed","_this2","_initializeInstanceProperties","ready","_propertiesChanged","templateExtensions","dom-if","dom-repeat","wrapTemplateExtension","replaceChild","attributes","findTemplateNode","parent","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","hasInsertionPoint","handler","createNodeEventHandler","_addEventListenerToNode","outerTemplateInfo","stripWhiteSpace","_parseTemplateContent","_parseTemplateNode","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","childInfo","infoIndex","createDocumentFragment","attrs","_parseTemplateNodeAttribute","nullTag","undefinedTag","symToStringTag","_getRawTag2","_objectToString2","_freeGlobal","freeSelf","freeGlobal","_Symbol2","nativeObjectToString","isOwn","tag","unmasked","_overArg","getPrototype","func","transform","_ponyfill","_ponyfill2","webpackPolyfill","deprecate","paths","children","_Symbol","observable","reducerKeys","finalReducers","finalReducerKeys","shapeAssertionError","initialState","random","assertReducerShape","hasChanged","nextState","_i","previousStateForKey","nextStateForKey","errorMessage","getUndefinedStateErrorMessage","_createStore","actionType","bindActionCreator","actionCreator","actionCreators","boundActionCreators","middlewares","_dispatch","chain","middlewareAPI","middleware","_extends","_compose","every","subscribers","Map","collect","what","which","_parent","actions","configurable","filter","update","propertiesChanged","off","_reduxActions","_toConsumableArray","originalAction","_polymerElement","_debounce","_async","LittleqRouter","_setKeyframeStyles","_getLazyLoader","_queryParamsMixin2","_locationMixin2","defaultRedirect","currentRoute","lazy","_lazyLoader","_debouncer","debounce","_pathToRegexp2","oldPage","transition","_timeOut","contains","_checkMiddlewares","_this3","_removePageAfterTransition","animation","_getAnimationEvent2","classList","remove","_removePageListenerFallback","add","child","_addMiddleware","_getMiddleware","_lazyLoadMiddleware","_getMiddlewares","_this4","catch","alert","page","redirect","_loadPage","_loadRedirect","_loadDefaultRedirect","_processMiddlewares","_showPage","_lazyLoadPage","_this5","el","animations","OAnimation","MozAnimation","WebkitAnimation","urlDoc","urlBase","LittleqRoute","_removePage","_getRoutes2","_processPage","_routeMatches","_checkIfRouteMatches","getRoutes"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t};\n\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t14: 0\n \t};\n\n\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + chunkId + \".\" + \"e63a3466211df8dfd3ee\" + \".fragment.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","window.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n/** @namespace */\nlet Polymer;\n","import { createStore } from 'redux';\nimport PolymerRedux from './mixins/polymer-redux';\n\nconst reducers = {};\nconst initial = {};\nconst store = createStore((state = initial, action) => state);\nconst ReduxMixin = PolymerRedux(store);\n\nexport { reducers, store, ReduxMixin };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","import './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nfunction resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nfunction resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nfunction pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nexport { resolveCss };\nexport { resolveUrl };\nexport { pathFromUrl };\n","import createStore from './createStore';\nimport combineReducers from './combineReducers';\nimport bindActionCreators from './bindActionCreators';\nimport applyMiddleware from './applyMiddleware';\nimport compose from './compose';\nimport warning from './utils/warning';\n\n/*\n* This is a dummy function to check if the function name has been altered by minification.\n* If the function has been minified and NODE_ENV !== 'production', warn the user.\n*/\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \\'production\\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { createStore, combineReducers, bindActionCreators, applyMiddleware, compose };","import './boot.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncInterface; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nexport const timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return  {\n      run(fn) { return setTimeout(fn, delay); },\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nexport const animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nexport const idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\n\nexport const microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\n","import './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","import { ElementMixin } from './lib/mixins/element-mixin.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @memberof Polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin Polymer.ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nconst Element = ElementMixin(HTMLElement);\nexport { Element };\n","import './boot.js';\n\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\nexport const isDeep = isPath;\n","import './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\n\n/**\n * Legacy settings.\n * @namespace\n * @memberof Polymer\n */\nconst settings = undefined || {};\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport { settings as Settings };\n\n/**\n * Globally settable property that is automatically assigned to\n * `Polymer.ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `Polymer.rootPath` to provide a stable application mount path when\n * using client side routing.\n *\n * @memberof Polymer\n */\nlet rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\nexport { rootPath };\n\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n * @memberof Polymer\n */\nlet sanitizeDOMValue = undefined;\n\nexport { sanitizeDOMValue };\n\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n","import isPlainObject from 'lodash-es/isPlainObject';\nimport $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nexport var ActionTypes = {\n  INIT: '@@redux/INIT'\n\n  /**\n   * Creates a Redux store that holds the state tree.\n   * The only way to change the data in the store is to call `dispatch()` on it.\n   *\n   * There should only be a single store in your app. To specify how different\n   * parts of the state tree respond to actions, you may combine several reducers\n   * into a single reducer function by using `combineReducers`.\n   *\n   * @param {Function} reducer A function that returns the next state tree, given\n   * the current state tree and the action to handle.\n   *\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\n   * to hydrate the state from the server in universal apps, or to restore a\n   * previously serialized user session.\n   * If you use `combineReducers` to produce the root reducer function, this must be\n   * an object with the same shape as `combineReducers` keys.\n   *\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n   * to enhance the store with third-party capabilities such as middleware,\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\n   * is `applyMiddleware()`.\n   *\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\n   * and subscribe to changes.\n   */\n};export default function createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected listener to be a function.');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}","/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}","import { reducers, store } from '@littleq/state-manager';\nimport { combineReducers } from 'redux';\n\nconst ROUTER_ACTION = {\n  PARAMS: 'ROUTER_UPDATE_PARAMS',\n  ROUTE: 'ROUTER_UPDATE_ROUTE'\n};\n\nreducers.router = (router = {}, action) => {\n  switch (action.type) {\n    case ROUTER_ACTION.PARAMS:\n      return Object.assign({}, router, {\n        params: action.params\n      });\n    case ROUTER_ACTION.ROUTE:\n      return Object.assign({}, router, {\n        route: action.route\n      });\n    default:\n      return router;\n  }\n};\n\nstore.replaceReducer(combineReducers(reducers));\n\nexport { ROUTER_ACTION };\n","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n  var isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","import { ReduxMixin } from '@littleq/state-manager';\nimport { LOCATION_ACTION } from './lib/reducer';\nimport resolveUrl from './lib/resolve-url';\n\nexport default (superClass) => {\n  return class extends ReduxMixin(superClass) {\n    static get properties () {\n      return {\n        // location-mixin\n        path: {\n          type: String,\n          observer: '_pathChanged',\n          statePath: 'location.path'\n        },\n\n        query: {\n          type: String,\n          observer: '_queryChanged',\n          statePath: 'location.query'\n        },\n\n        urlSpaceRegex: {\n          type: String\n        },\n\n        hash: {\n          type: String,\n          statePath: 'location.hash'\n        },\n\n        dwellTime: {\n          type: Number\n        },\n\n        _urlSpaceRegExp: {\n          type: String,\n          computed: '_makeRegExp(urlSpaceRegex)'\n        },\n\n        _lastChangedAt: {\n          type: String\n        },\n\n        _initialized: {\n          type: Boolean\n        }\n      };\n    }\n\n    constructor () {\n      super();\n      this._boundHashChanged = this._hashChanged.bind(this);\n      this._boundUrlChanged = this._urlChanged.bind(this);\n      this._boundGlobalOnClick = this._globalOnClick.bind(this);\n    }\n\n    connectedCallback () {\n      if (super.disconnectedCallback) {\n        super.connectedCallback();\n      }\n      window.addEventListener('hashchange', this._boundHashChanged);\n      window.addEventListener('location-changed', this._boundUrlChanged);\n      window.addEventListener('popstate', this._boundUrlChanged);\n      document.body.addEventListener('click', this._boundGlobalOnClick, true);\n      this._lastChangedAt = window.performance.now() - (this.dwellTime - 200);\n      this._initialized = true;\n\n      // set initialize values\n      // this.path = window.decodeURIComponent(window.location.pathname);\n      // this.query = window.location.search.slice(1);\n      // this.hash = window.decodeURIComponent(window.location.hash.slice(1));\n      this.dwellTime = 2000;\n      this._initialized = false;\n      this._urlChanged();\n    }\n\n    disconnectedCallback () {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      window.removeEventListener('hashchange', this._boundHashChanged);\n      window.removeEventListener('location-changed', this._boundUrlChanged);\n      window.removeEventListener('popstate', this._boundUrlChanged);\n      document.body.removeEventListener('click', this._boundGlobalOnClick);\n      this._initialized = false;\n    }\n\n    _pathChanged (path) {}\n\n    _queryChanged (query) {}\n\n    _hashChanged () {\n      this.dispatch({\n        type: LOCATION_ACTION.HASH,\n        path: window.decodeURIComponent(window.location.hash.substring(1))\n      });\n      // this.hash = window.decodeURIComponent(window.location.hash.substring(1));\n    }\n\n    _urlChanged () {\n      // We want to extract all info out of the updated URL before we\n      // try to write anything back into it.\n      //\n      // i.e. without _dontUpdateUrl we'd overwrite the new path with the old\n      // one when we set this.hash. Likewise for query.\n      this._dontUpdateUrl = true;\n      this._hashChanged();\n\n      this.dispatch({\n        type: LOCATION_ACTION.PATH,\n        path: window.decodeURIComponent(window.location.pathname)\n      });\n\n      this.dispatch({\n        type: LOCATION_ACTION.QUERY,\n        query: window.location.search.substring(1)\n      });\n\n      // this.path =\n      // this.query =\n      this._dontUpdateUrl = false;\n      this._updateUrl();\n    }\n\n    _getUrl () {\n      var partiallyEncodedPath = window.encodeURI(this.path).replace(/\\#/g, '%23').replace(/\\?/g, '%3F'); // eslint-disable-line no-useless-escape\n      var partiallyEncodedQuery = '';\n      if (this.query) {\n        partiallyEncodedQuery = '?' + this.query.replace(/\\#/g, '%23'); // eslint-disable-line no-useless-escape\n      }\n      var partiallyEncodedHash = '';\n      if (this.hash) {\n        partiallyEncodedHash = '#' + window.encodeURI(this.hash);\n      }\n      return (partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash);\n    }\n\n    _updateUrl () {\n      if (this._dontUpdateUrl || !this._initialized) {\n        return;\n      }\n\n      if (this.path === window.decodeURIComponent(window.location.pathname) &&\n          this.query === window.location.search.substring(1) &&\n          this.hash === window.decodeURIComponent(window.location.hash.substring(1))) {\n        // Nothing to do, the current URL is a representation of our properties.\n        return;\n      }\n      var newUrl = this._getUrl();\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNewUrl = resolveUrl(newUrl, window.location.protocol + '//' + window.location.host).href;\n      var now = window.performance.now();\n      var shouldReplace = this._lastChangedAt + this.dwellTime > now;\n      this._lastChangedAt = now;\n      if (shouldReplace) {\n        window.history.replaceState({}, '', fullNewUrl);\n      } else {\n        window.history.pushState({}, '', fullNewUrl);\n      }\n      window.dispatchEvent(new window.CustomEvent('location-changed'));\n    }\n\n    /**\n     * A necessary evil so that links work as expected. Does its best to\n     * bail out early if possible.\n     *\n     * @param {MouseEvent} event .\n     */\n    _globalOnClick (event) {\n      // If another event handler has stopped this event then there's nothing\n      // for us to do. This can happen e.g. when there are multiple\n      // iron-location elements in a page.\n      if (event.defaultPrevented) {\n        return;\n      }\n      var href = this._getSameOriginLinkHref(event);\n      if (!href) {\n        return;\n      }\n      event.preventDefault();\n      // If the navigation is to the current page we shouldn't add a history\n      // entry or fire a change event.\n      if (href === window.location.href) {\n        return;\n      }\n\n      window.history.pushState({}, '', href);\n      window.dispatchEvent(new window.CustomEvent('location-changed'));\n    }\n\n    /**\n     * Returns the absolute URL of the link (if any) that this click event\n     * is clicking on, if we can and should override the resulting full\n     * page navigation. Returns null otherwise.\n     *\n     * @param {MouseEvent} event .\n     * @return {string?} .\n     */\n    _getSameOriginLinkHref (event) {\n      // We only care about left-clicks.\n      if (event.button !== 0) {\n        return null;\n      }\n      // We don't want modified clicks, where the intent is to open the page\n      // in a new tab.\n      if (event.metaKey || event.ctrlKey) {\n        return null;\n      }\n      var eventPath = event.composedPath();\n      var anchor = null;\n      for (var i = 0; i < eventPath.length; i++) {\n        var element = eventPath[i];\n        if (element.tagName === 'A' && element.href) {\n          anchor = element;\n          break;\n        }\n      }\n      // If there's no link there's nothing to do.\n      if (!anchor) {\n        return null;\n      }\n      // Target blank is a new tab, don't intercept.\n      if (anchor.target === '_blank') {\n        // capture link click\n        if (anchor.href && window.ga) {\n          window.ga('send', 'event', 'Link', 'Click', anchor.href, 1);\n        }\n        return null;\n      }\n      // If the link is for an existing parent frame, don't intercept.\n      if ((anchor.target === '_top' ||\n          anchor.target === '_parent') &&\n          window.top !== window) {\n        return null;\n      }\n      var href = anchor.href;\n      // It only makes sense for us to intercept same-origin navigations.\n      // pushState/replaceState don't work with cross-origin links.\n      var url;\n      if (document.baseURI != null) {\n        url = resolveUrl(href, /** @type {string} */(document.baseURI));\n      } else {\n        url = resolveUrl(href);\n      }\n      var origin;\n      // IE Polyfill\n      if (window.location.origin) {\n        origin = window.location.origin;\n      } else {\n        origin = window.location.protocol + '//' + window.location.host;\n      }\n      var urlOrigin;\n      if (url.origin) {\n        urlOrigin = url.origin;\n      } else {\n        urlOrigin = url.protocol + '//' + url.host;\n      }\n      if (urlOrigin !== origin) {\n        return null;\n      }\n      var normalizedHref = url.pathname + url.search + url.hash;\n      // pathname should start with '/', but may not if `new URL` is not supported\n      if (normalizedHref[0] !== '/') {\n        normalizedHref = '/' + normalizedHref;\n      }\n      // If we've been configured not to handle this url... don't handle it!\n      if (this._urlSpaceRegExp &&\n          !this._urlSpaceRegExp.test(normalizedHref)) {\n        return null;\n      }\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNormalizedHref = resolveUrl(normalizedHref, window.location.href).href;\n      return fullNormalizedHref;\n    }\n\n    _makeRegExp (urlSpaceRegex) {\n      return RegExp(urlSpaceRegex);\n    }\n  };\n};\n","import { ReduxMixin } from '@littleq/state-manager';\nimport { QUERYPARAMS_ACTION } from './lib/reducer';\n\nexport default (superClass) => {\n  return class extends ReduxMixin(superClass) {\n    static get properties () {\n      return {\n        // query params 'paramsString', 'paramsObject', '_dontReact'\n        paramsString: {\n          type: String,\n          observer: '_paramsStringChanged'\n        },\n\n        paramsObject: {\n          type: Object,\n          statePath: 'query.params'\n        },\n\n        _dontReact: {\n          type: Boolean\n        }\n      };\n    }\n\n    connectedCallback () {\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n\n      // initialize values\n      this.paramsObject = {};\n      this._dontReact = false;\n    }\n\n    _queryChanged (query) {\n      this.paramsString = query;\n    }\n\n    _paramsStringChanged () {\n      this._dontReact = true;\n      this.dispatch({\n        type: QUERYPARAMS_ACTION.UPDATE,\n        params: this._decodeParams(this.paramsString)\n      });\n\n      // this.paramsObject =\n      this._dontReact = false;\n    }\n\n    paramsObjectChanged () {\n      if (this._dontReact) {\n        return;\n      }\n      this.paramsString = this._encodeParams(this.paramsObject)\n        .replace(/%3F/g, '?').replace(/%2F/g, '/').replace(/'/g, '%27');\n    }\n\n    _encodeParams (params) {\n      var encodedParams = [];\n      for (var key in params) {\n        var value = params[key];\n        if (value === '') {\n          encodedParams.push(encodeURIComponent(key));\n        } else if (value) {\n          encodedParams.push(\n            encodeURIComponent(key) +\n            '=' +\n            encodeURIComponent(value.toString())\n          );\n        }\n      }\n      return encodedParams.join('&');\n    }\n\n    _decodeParams (paramString) {\n      var params = {};\n      // Work around a bug in decodeURIComponent where + is not\n      // converted to spaces:\n      paramString = (paramString || '').replace(/\\+/g, '%20');\n      var paramList = paramString.split('&');\n      for (var i = 0; i < paramList.length; i++) {\n        var param = paramList[i].split('=');\n        if (param[0]) {\n          params[decodeURIComponent(param[0])] =\n              decodeURIComponent(param[1] || '');\n        }\n      }\n      return params;\n    }\n  };\n};\n","import './boot.js';\nimport './mixin.js';\nimport './async.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncModule; // eslint-disable-line no-unused-vars\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n * @memberof Polymer\n */\nclass Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncModule} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(this._timer);\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n/**\n * Creates a debouncer if no debouncer is passed as a parameter\n * or it cancels an active debouncer otherwise. The following\n * example shows how a debouncer can be called multiple times within a\n * microtask and \"debounced\" such that the provided callback function is\n * called once. Add this method to a custom element:\n *\n * _debounceWork() {\n *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n *       Polymer.Async.microTask, () => {\n *     this._doWork();\n *   });\n * }\n *\n * If the `_debounceWork` method is called multiple times within the same\n * microtask, the `_doWork` function will be called only once at the next\n * microtask checkpoint.\n *\n * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n * this with a debouncer, you can use `Polymer.enqueueDebouncer` and\n * `Polymer.flush`. For example, extend the above example by adding\n * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\n * the debouncer has completed.\n *\n * @param {Debouncer?} debouncer Debouncer object.\n * @param {!AsyncModule} asyncModule Object with Async interface\n * @param {function()} callback Callback to run.\n * @return {!Debouncer} Returns a debouncer object.\n */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      debouncer.cancel();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n}\n\nexport { Debouncer };\n","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = inst[info.methodName];\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (node.localName == 'input' && binding.target == 'value')) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertyAccessors` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChaged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     * @override\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else {\n        start = Math.floor(start);\n      }\n      if (!start) {\n        start = 0;\n      }\n      let ret = array.splice(start, deleteCount, ...items);\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    _createPropertyObserver(property, methodName, dynamicFn) {\n      let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: methodName}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = CaseMap.camelToDashCase(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    static createPropertyObserver(property, methodName, dynamicFn) {\n      this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal Javascript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal Javascript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {Object} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) evacipate an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n","import 'core/components/lazy-loader';\nimport '@littleq/state-manager';\nimport '@littleq/littleq-router';\n\nconst script = document.createElement('script');\nscript.src = 'https://use.typekit.net/fed2dzd.js';\nscript.onload = () => {\n  try {\n    window.Typekit.load({ async: true });\n  } catch (e) {\n    console.log(e);\n  }\n};\ndocument.body.appendChild(script);\n","import fragments from '../fragments';\nimport { customElements, HTMLElement } from 'global/window';\n\nclass LazyLoader extends HTMLElement {\n  static get is () { return 'lazy-loader'; }\n\n  import (name) {\n    return fragments[name] && typeof fragments[name] === 'function'\n      ? fragments[name]()\n      : Promise.reject(new Error('No fragment found'));\n  }\n}\n\n!customElements.get(LazyLoader.is)\n  ? customElements.define(LazyLoader.is, LazyLoader)\n  : console.warn(`${LazyLoader.is} is already defined`);\n","\nexport default {\n  'page-home': () => { return import('page-home') }, \n'page-speakers': () => { return import('page-speakers') }, \n'page-schedule': () => { return import('page-schedule') }, \n'page-sessions': () => { return import('page-sessions') }, \n'page-sponsor': () => { return import('page-sponsor') }, \n'page-tickets': () => { return import('page-tickets') }, \n'page-about': () => { return import('page-about') }, \n'page-faq': () => { return import('page-faq') }, \n'page-convince': () => { return import('page-convince') }, \n'page-not-authorized': () => { return import('page-not-authorized') }, \n'page-not-found': () => { return import('page-not-found') }\n}\n  ","import '../utils/boot.js';\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { camelToDashCase } from '../utils/case-map.js';\nimport { cssFromModuleImports, cssFromTemplate } from '../utils/style-gather.js';\nimport { resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\n\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   */\n  const polymerElementBase = PropertyEffects(base);\n\n  let caseMap = caseMap$0;\n\n  /**\n   * Returns the `properties` object specifically on `klass`. Use for:\n   * (1) super chain mixes togther to make `propertiesForClass` which is\n   * then used to make `observedAttributes`.\n   * (2) properties effects and observers are created from it at `finalize` time.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Object} Object containing own properties for this class\n   * @private\n   */\n  function ownPropertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownProperties', klass))) {\n      klass.__ownProperties =\n        klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).properties : {};\n    }\n    return klass.__ownProperties;\n  }\n\n  /**\n   * Returns the `observers` array specifically on `klass`. Use for\n   * setting up observers.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Array} Array containing own observers for this class\n   * @private\n   */\n  function ownObserversForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', klass))) {\n      klass.__ownObservers =\n        klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).observers : [];\n    }\n    return klass.__ownObservers;\n  }\n\n  /**\n   * Mixes `props` into `flattenedProps` but upgrades shorthand type\n   * syntax to { type: Type}.\n   *\n   * @param {Object} flattenedProps Bag to collect flattened properties into\n   * @param {Object} props Bag of properties to add to `flattenedProps`\n   * @return {Object} The input `flattenedProps` bag\n   * @private\n   */\n  function flattenProperties(flattenedProps, props) {\n    for (let p in props) {\n      let o = props[p];\n      if (typeof o == 'function') {\n        o = { type: o };\n      }\n      flattenedProps[p] = o;\n    }\n    return flattenedProps;\n  }\n\n  /**\n   * Returns a flattened list of properties mixed together from the chain of all\n   * constructor's `config.properties`. This list is used to create\n   * (1) observedAttributes,\n   * (2) class property default values\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   * @suppress {missingProperties} class.prototype is not a property for some reason?\n   * @private\n   */\n  function propertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classProperties', klass))) {\n      klass.__classProperties =\n      flattenProperties({}, ownPropertiesForClass(klass));\n      let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        klass.__classProperties = Object.assign(\n          Object.create(propertiesForClass(/** @type PolymerElementConstructor */(superCtor))),\n          klass.__classProperties);\n      }\n    }\n    return klass.__classProperties;\n  }\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `propertiesForClass`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaultsForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n      klass.__classPropertyDefaults = null;\n      let props = propertiesForClass(klass);\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n          klass.__classPropertyDefaults[p] = info;\n        }\n      }\n    }\n    return klass.__classPropertyDefaults;\n  }\n\n  /**\n   * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {boolean} True if all metaprogramming for this class has been\n   *   completed\n   * @private\n   */\n  function hasClassFinalized(klass) {\n    return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n  }\n\n  /**\n   * Called by `ElementClass.finalize()`. Ensures this `klass` and\n   * *all superclasses* are finalized by traversing the prototype chain\n   * and calling `klass.finalize()`.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClassAndSuper(klass) {\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    let superCtor = Object.getPrototypeOf(proto).constructor;\n    if (superCtor.prototype instanceof PolymerElement) {\n      superCtor.finalize();\n    }\n    finalizeClass(klass);\n  }\n\n  /**\n   * Configures a `klass` based on a staic `klass.config` object and\n   * a `template`. This includes creating accessors and effects\n   * for properties in `config` and the `template` as well as preparing the\n   * `template` for stamping.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClass(klass) {\n    klass.__finalized = true;\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    if (klass.hasOwnProperty(\n      JSCompiler_renameProperty('is', klass)) && klass.is) {\n      register(proto);\n    }\n    let props = ownPropertiesForClass(klass);\n    if (props) {\n      finalizeProperties(proto, props);\n    }\n    let observers = ownObserversForClass(klass);\n    if (observers) {\n      finalizeObservers(proto, observers, props);\n    }\n    // note: create \"working\" template that is finalized at instance time\n    let template = /** @type PolymerElementConstructor */ (klass).template;\n    if (template) {\n      if (typeof template === 'string') {\n        let t = document.createElement('template');\n        t.innerHTML = template;\n        template = t;\n      } else {\n        template = template.cloneNode(true);\n      }\n      proto._template = template;\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `properties` object.\n   * Leverages `PropertyEffects` to create property accessors and effects\n   * supporting, observers, reflecting to attributes, change notification,\n   * computed properties, and read only properties.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *    and effects to\n   * @param {Object} properties Flattened bag of property descriptors for\n   *    this class\n   * @private\n   */\n  function finalizeProperties(proto, properties) {\n    for (let p in properties) {\n      createPropertyFromConfig(proto, p, properties[p], properties);\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `observers` array.\n   * Leverages `PropertyEffects` to create observers.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {Object} observers Flattened array of observer descriptors for\n   *   this class\n   * @param {Object} dynamicFns Object containing keys for any properties\n   *   that are functions and should trigger the effect when the function\n   *   reference is changed\n   * @private\n   */\n  function finalizeObservers(proto, observers, dynamicFns) {\n    for (let i=0; i < observers.length; i++) {\n      proto._createMethodObserver(observers[i], dynamicFns);\n    }\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is dersialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n  }\n\n  /**\n   * Configures an element `proto` to function with a given `template`.\n   * The element name `is` and extends `ext` must be specified for ShadyCSS\n   * style scoping.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {!HTMLTemplateElement} template Template to process and bind\n   * @param {string} baseURI URL against which to resolve urls in\n   *   style element cssText\n   * @param {string} is Tag name (or type extension name) for this element\n   * @param {string=} ext For type extensions, the tag name that was extended\n   * @private\n   */\n  function finalizeTemplate(proto, template, baseURI, is, ext) {\n    // support `include=\"module-name\"`\n    let cssText =\n      cssFromModuleImports(is) +\n      cssFromTemplate(template, baseURI);\n    if (cssText) {\n      let style = document.createElement('style');\n      style.textContent = cssText;\n      template.content.insertBefore(style, template.content.firstChild);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is, ext);\n    }\n    proto._bindTemplate(template);\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Standard Custom Elements V1 API.  The default implementation returns\n     * a list of dash-cased attributes based on a flattening of all properties\n     * declared in `static get properties()` for this element and any\n     * superclasses.\n     *\n     * @return {Array} Observed attribute list\n     */\n    static get observedAttributes() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n        let list = [];\n        let properties = propertiesForClass(this);\n        for (let prop in properties) {\n          list.push(camelToDashCase(prop));\n        }\n        this.__observedAttributes = list;\n      }\n      return this.__observedAttributes;\n    }\n\n    /**\n     * Called automatically when the first element instance is created to\n     * ensure that class finalization work has been completed.\n     * May be called by users to eagerly perform class finalization work\n     * prior to the creation of the first element instance.\n     *\n     * Class finalization work generally includes meta-programming such as\n     * creating property accessors and any property effect metadata needed for\n     * the features used.\n     *\n     * @public\n     */\n    static finalize() {\n      if (!hasClassFinalized(this)) {\n        finalizeClassAndSuper(this);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `Polymer.DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type PolymerElementConstructor*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     * Defaults to the path matching the url containing a `dom-module` element\n     * matching this element's static `is` property.\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n          const module = DomModule && DomModule.import(/** @type PolymerElementConstructor */ (this).is);\n          this._importPath = module ? module.assetpath : '' ||\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.importPath;\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Node>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `Polymer.PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      const importPath = this.constructor.importPath;\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      if (this._template && !this._template.__polymerFinalized) {\n        this._template.__polymerFinalized = true;\n        const baseURI =\n          importPath ? resolveUrl$0(importPath) : '';\n        finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n          /**@type {!HTMLElement}*/(this).localName);\n      }\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = importPath;\n      // apply property defaults...\n      let p$ = propertyDefaultsForClass(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {invalidCasts}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      this._enableProperties();\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `disconnectedCallback`.\n     */\n    disconnectedCallback() {}\n\n    /**\n     * Stamps the element template.\n     *\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'Polymer.Element can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `attributeChangedCallback`.\n     *\n     * By default, attributes declared in `properties` metadata are\n     * deserialized using their `type` information to properties of the\n     * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n     * properties.\n     *\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @override\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        let property = caseMap.dashToCamelCase(name);\n        let type = propertiesForClass(this.constructor)[property].type;\n        if (!this._hasReadOnlyEffect(property)) {\n          this._attributeToProperty(name, value, type);\n        }\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\nexport let instanceCount = 0;\nexport const registrations = [];\n\nexport function _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","import { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\n\nfunction importModule(moduleId) {\n  const /** Polymer.DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\nexport function cssFromModules(moduleIds) {\n  let modules = moduleIds.trim().split(/\\s+/);\n  let cssText = '';\n  for (let i=0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n  return cssText;\n}\n\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t, /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  // if element is a template, get content from its .content\n  let e$ = template.content.querySelectorAll('style');\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    // support style sharing by allowing styles to \"include\"\n    // other dom-modules that contain styling\n    let include = e.getAttribute(INCLUDE_ATTR);\n    if (include) {\n      cssText += cssFromModules(include);\n    }\n    e.parentNode.removeChild(e);\n    cssText += baseURI ?\n      resolveCss(e.textContent, baseURI) : e.textContent;\n  }\n  return cssText;\n}\n\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\nexport function _cssFromModuleImports(module) {\n  let cssText = '';\n  let p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      let importDoc = p.import;\n      // NOTE: polyfill affordance.\n      // under the HTMLImports polyfill, there will be no 'body',\n      // but the import pseudo-doc can be used directly.\n      let container = importDoc.body ? importDoc.body : importDoc;\n      cssText +=\n        resolveCss(container.textContent,\n          importDoc.baseURI);\n    }\n  }\n  return cssText;\n}\n","import '../utils/boot.js';\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @memberof Polymer\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nclass DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  attributeChangedCallback(name, old, value) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n\nexport { DomModule };\n","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { microTask } from '../utils/async.js';\n\nlet caseMap = caseMap$0;\n\nlet microtask = microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  class PropertyAccessors extends superClass {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__serializing;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {boolean} */\n      this.__dataEnabled;\n      /** @type {boolean} */\n      this.__dataReady;\n      /** @type {boolean} */\n      this.__dataInvalid;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {Object} */\n      this.__dataPending;\n      /** @type {Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__dataProto;\n      /** @type {Object} */\n      this.__dataHasAccessor;\n      /** @type {Object} */\n      this.__dataInstanceProps;\n      this._initializeProperties();\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @protected\n     */\n    _initializeProperties() {\n      this.__serializing = false;\n      this.__dataCounter = 0;\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     */\n    _ensureAttribute(attribute, value) {\n      if (!this.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(this, value, attribute);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to.\n     */\n    _attributeToProperty(attribute, value, type) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this.__serializing) {\n        let property = caseMap.dashToCamelCase(attribute);\n        this[property] = this._deserializeValue(value, type);\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(this, value,\n        attribute || caseMap.camelToDashCase(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      let str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Number:\n          outValue = Number(value);\n          break;\n\n        case Boolean:\n          outValue = (value !== null);\n          break;\n\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n\n        case Date:\n          outValue = new Date(value);\n          break;\n\n        case String:\n        default:\n          outValue = value;\n          break;\n      }\n\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.  When calling on\n     * a prototype, any overwritten values are saved in `__dataProto`,\n     * and it is up to the subclasser to decide how/when to set those\n     * properties back into the accessor.  When calling on an instance,\n     * the overwritten value is set via `_setPendingProperty`, and the\n     * user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          /* eslint-disable valid-jsdoc */\n          /** @this {PropertyAccessors} */\n          get: function() {\n            return this.__data[property];\n          },\n          /** @this {PropertyAccessors} */\n          set: readOnly ? function() {} : function(value) {\n            this._setProperty(property, value);\n          }\n          /* eslint-enable */\n        });\n      }\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     *\n     * @protected\n     */\n    _flushProperties() {\n      if (this.__dataPending && this.__dataOld) {\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n        this.__dataCounter--;\n      }\n    }\n\n    /**\n     * Lifecycle callback called the first time properties are being flushed.\n     * Prior to `ready`, all property sets through accessors are queued and\n     * their effects are flushed after this method returns.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its properties initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      // Run normal flush\n      this._flushProperties();\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` for primitive types if a\n     * strict equality check fails, and returns `true` for all Object/Arrays.\n     * The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n         // This ensures (old==NaN, value==NaN) always returns false\n         (old === old || value === value))\n      );\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type Element */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type DocumentFragment */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      return /** @type {!StampedTemplate} */(dom);\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to add\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to remove\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","module.exports = require('./lib/index');\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar root; /* global window */\n\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = (0, _ponyfill2['default'])(root);\nexports['default'] = result;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};","import { ActionTypes } from './createStore';\nimport isPlainObject from 'lodash-es/isPlainObject';\nimport warning from './utils/warning';\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';\n\n  return 'Given action ' + actionName + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nexport default function combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning('No reducer provided for key \"' + key + '\"');\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  var unexpectedKeyCache = void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError = void 0;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments[1];\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}","function bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(undefined, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport compose from './compose';\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nexport default function applyMiddleware() {\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function (reducer, preloadedState, enhancer) {\n      var store = createStore(reducer, preloadedState, enhancer);\n      var _dispatch = store.dispatch;\n      var chain = [];\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch(action) {\n          return _dispatch(action);\n        }\n      };\n      chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(undefined, chain)(store.dispatch);\n\n      return _extends({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}","import { get } from '@polymer/polymer/lib/utils/path';\n\n/**\n * Polymer Redux\n *\n * Creates a Class mixin for decorating Elements with a given Redux store.\n *\n * @polymerMixin\n *\n * @param {Object} store Redux store.\n * @return {Function} Class mixin.\n */\nexport default function PolymerRedux (store) {\n  if (!store) {\n    throw new TypeError('PolymerRedux: expecting a redux store.');\n  } else if (!['getState', 'dispatch', 'subscribe'].every(k => typeof store[k] === 'function')) {\n    throw new TypeError('PolymerRedux: invalid store object.');\n  }\n\n  const subscribers = new Map();\n\n  /**\n   * Binds element's properties to state changes from the Redux store.\n   *\n   * @example\n   *     const update = bind(el, props) // set bindings\n   *     update(state) // manual update\n   *\n   * @private\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @return {Function} Update function.\n   */\n  const bind = (element, properties) => {\n    const bindings = Object.keys(properties)\n      .filter(name => {\n        const property = properties[name];\n        if (Object.prototype.hasOwnProperty.call(property, 'statePath')) {\n          if (!property.readOnly && property.notify) {\n            console.warn(`PolymerRedux: <${element.constructor.is}>.${name} has \"notify\" enabled, two-way bindings goes against Redux's paradigm`);\n          }\n          return true;\n        }\n        return false;\n      });\n\n    /**\n     * Updates an element's properties with the given state.\n     *\n     * @private\n     * @param {Object} state\n     */\n    const update = state => {\n      let propertiesChanged = false;\n      bindings.forEach(name => { // Perhaps .reduce() to a boolean?\n        const {statePath} = properties[name];\n        const value = (typeof statePath === 'function')\n          ? statePath.call(element, state)\n          : get(state, statePath);\n\n        const changed = element._setPendingPropertyOrPath(name, value, true);\n        propertiesChanged = propertiesChanged || changed;\n      });\n      if (propertiesChanged) {\n        element._invalidateProperties();\n      }\n    };\n\n    // Redux listener\n    const unsubscribe = store.subscribe(() => {\n      const detail = store.getState();\n      update(detail);\n\n      element.dispatchEvent(new window.CustomEvent('state-changed', {detail}));\n    });\n\n    subscribers.set(element, unsubscribe);\n\n    return update(store.getState());\n  };\n\n  /**\n   * Unbinds an element from state changes in the Redux store.\n   *\n   * @private\n   * @param {HTMLElement} element\n   */\n  const unbind = element => {\n    const off = subscribers.get(element);\n    if (typeof off === 'function') {\n      off();\n    }\n  };\n\n  /**\n   * Merges a property's object value using the defaults way.\n   *\n   * @private\n   * @param {Object} what Initial prototype\n   * @param {String} which Property to collect.\n   * @return {Object} the collected values\n   */\n  const collect = (what, which) => {\n    let res = {};\n    while (what) {\n      res = Object.assign({}, what[which], res); // Respect prototype priority\n      what = Object.getPrototypeOf(what);\n    }\n    return res;\n  };\n\n  /**\n   * ReduxMixin\n   *\n   * @example\n   *     const ReduxMixin = PolymerRedux(store)\n   *     class Foo extends ReduxMixin(Polymer.Element) { }\n   *\n   * @polymerMixinClass\n   *\n   * @param {Polymer.Element} parent The polymer parent element.\n   * @return {Function} PolymerRedux mixed class.\n   */\n  return parent => class ReduxMixin extends parent {\n    constructor () {\n      super();\n\n      // Collect the action creators first as property changes trigger\n      // dispatches from observers, see #65, #66, #67\n      const actions = collect(this.constructor, 'actions');\n      Object.defineProperty(this, '_reduxActions', {\n        configurable: true,\n        value: actions\n      });\n    }\n\n    connectedCallback () {\n      super.connectedCallback();\n      const properties = collect(this.constructor, 'properties');\n      bind(this, properties);\n    }\n\n    disconnectedCallback () {\n      super.disconnectedCallback();\n      unbind(this);\n    }\n\n    /**\n     * Dispatches an action to the Redux store.\n     *\n     * @example\n     *     element.dispatch({ type: 'ACTION' })\n     *\n     * @example\n     *     element.dispatch('actionCreator', 'foo', 'bar')\n     *\n     * @example\n     *     element.dispatch((dispatch) => {\n     *         dispatch({ type: 'MIDDLEWARE'})\n     *     })\n     *\n     * @param  {...*} args\n     * @return {Object} The action.\n     */\n    dispatch (...args) {\n      const actions = this._reduxActions;\n\n      // Action creator\n      let [action] = args;\n      if (typeof action === 'string') {\n        if (typeof actions[action] !== 'function') {\n          throw new TypeError(`PolymerRedux: <${this.constructor.is}> invalid action creator \"${action}\"`);\n        }\n        action = actions[action](...args.slice(1));\n      }\n\n      // Proxy async dispatch\n      if (typeof action === 'function') {\n        const originalAction = action;\n        action = (...args) => {\n          // Replace redux dispatch\n          args.splice(0, 1, (...args) => {\n            return this.dispatch(...args);\n          });\n          return originalAction(...args);\n        };\n\n        // Copy props from the original action to the proxy.\n        // see https://github.com/tur-nr/polymer-redux/issues/98\n        Object.keys(originalAction).forEach(prop => {\n          action[prop] = originalAction[prop];\n        });\n      }\n\n      return store.dispatch(action);\n    }\n\n    /**\n     * Gets the current state in the Redux store.\n     *\n     * @return {*}\n     */\n    getState () {\n      return store.getState();\n    }\n  };\n}\n","import './littleq-router';\nimport './littleq-route';\n","import { Element } from '@polymer/polymer/polymer-element';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce';\nimport { timeOut } from '@polymer/polymer/lib/utils/async';\nimport { ReduxMixin } from '@littleq/state-manager';\nimport { customElements, alert } from 'global/window';\nimport { ROUTER_ACTION } from './lib/reducer';\nimport getAnimationEvent from './lib/get-animation-event';\nimport pathToRegexp from 'path-to-regexp';\nimport LocationMixin from '@littleq/location-mixin';\nimport QueryParamsMixin from '@littleq/query-params-mixin';\n\nclass LittleqRouter extends ReduxMixin(QueryParamsMixin(LocationMixin(Element))) {\n  static get is () { return 'littleq-router'; }\n\n  static get template () {\n    return `\n    <style>\n      ::slotted(.animated) {\n        animation-duration: 0.3s;\n        animation-fill-mode: both;\n      }\n\n      ::slotted(*) > .animated {\n        animation-duration: 1s;\n        animation-fill-mode: both;\n      }\n\n      ::slotted(.fadeOut) {\n        animation-name: fadeOut;\n      }\n\n      ::slotted(*) > .fadeOut {\n        animation-name: fadeOut;\n      }\n\n      ::slotted(.fadeIn) {\n        animation-name: fadeIn;\n      }\n\n      ::slotted(*) > .fadeIn {\n        animation-name: fadeIn;\n      }\n    </style>\n    <main role=\"main\">\n      <slot name=\"page\"></slot>\n    </main>\n    `;\n  }\n\n  static get properties () {\n    return {\n      defaultRedirect: {\n        type: String\n      },\n\n      params: {\n        type: Object,\n        statePath: 'router.params'\n      },\n\n      currentRoute: {\n        type: String,\n        statePath: 'router.route'\n      }\n    };\n  }\n\n  constructor () {\n    super();\n    this._setKeyframeStyles();\n    this._getLazyLoader();\n  }\n\n  static get observers () {\n    return [\n      '_checkPathRouteIfExists(path, currentRoute)'\n    ];\n  }\n\n  _setKeyframeStyles () {\n    const style = document.createElement('style');\n    style.id = 'littlq-router-animation-styles';\n    style.innerHTML = `\n      @keyframes fadeOut {\n        from {\n          opacity: 1;\n        }\n\n        to {\n          opacity: 0;\n        }\n      }\n\n      @keyframes fadeIn {\n        from {\n          opacity: 0;\n        }\n\n        to {\n          opacity: 1;\n        }\n      }\n    `;\n    if (!document.querySelector('#littlq-router-animation-styles')) document.head.appendChild(style);\n  }\n\n  _getLazyLoader () {\n    const lazy = this.getAttribute('lazy-loader') || 'lazy-loader';\n    this._lazyLoader = document.querySelector(lazy);\n    if (!this._lazyLoader) console.warn('will not be able to lazy load components without the lazy-loader tag. Install lazy-loader tag');\n  }\n\n  /**\n   * Check path and route if it matches. Because the matching happens in the routes\n   * themselves, it will wait for 200 milliseconds before showing the default, which\n   * is the not-found route.\n   *\n   * @param {any} path\n   * @param {any} route\n   * @memberof LittleqRouter\n   */\n  _checkPathRouteIfExists (path, route) {\n    this._debouncer = Debouncer.debounce(\n      this._debouncer,\n      timeOut.after(200),\n      () => {\n        const keys = [];\n        const re = pathToRegexp(route || '', keys);\n        const exec = re.exec(path);\n        if (!exec) {\n          this.dispatch({\n            type: ROUTER_ACTION.ROUTE,\n            route: 'not-found'\n          });\n        }\n      }\n    );\n  }\n\n  _removePageAfterTransition (oldPage, route, transition, fn) {\n    if (this._timeOut) clearTimeout(this._timeOut);\n    if (transition && fn) oldPage.removeEventListener(transition, fn);\n    if (this.contains(oldPage)) this.removeChild(oldPage);\n    this._checkMiddlewares(route);\n  }\n\n  _removePageListenerFallback (oldPage, route, transition) {\n    this._timeOut = setTimeout(() => {\n      this._removePageAfterTransition(oldPage, route, transition);\n    }, 550);\n    const fn = () => {\n      this._removePageAfterTransition(oldPage, route, transition, fn);\n    };\n    oldPage.addEventListener(transition, fn);\n  }\n\n  _removePage (oldPage, route) {\n    const animation = getAnimationEvent(oldPage);\n    oldPage.classList.remove('fadeIn');\n    !animation ? this._removePageAfterTransition(oldPage, route) : this._removePageListenerFallback(oldPage, route, animation);\n    oldPage.classList.add('animated');\n    oldPage.classList.add('fadeOut');\n  }\n\n  _getMiddlewares (parent, middlewares = []) {\n    for (let i = 0; i < parent.children.length; i++) {\n      let child = parent.children[i];\n      this._addMiddleware(!customElements.get(child.tagName.toLowerCase()) ? this._lazyLoadMiddleware(child) : this._getMiddleware(child), middlewares);\n    }\n    return parent.tagName.toLowerCase() === 'littleq-router' || !parent.parentNode ? middlewares : this._getMiddlewares(parent.parentNode, middlewares);\n  }\n\n  _addMiddleware (middleware, middlewares) {\n    if (middleware !== undefined) {\n      middleware instanceof Promise ? middlewares.push(middleware) : middlewares.push(Promise.resolve(middleware));\n    }\n  }\n\n  _getMiddleware (middleware) {\n    if (typeof middleware.middleware === 'function' && middleware.tagName.toLowerCase() !== 'littleq-route') return middleware.middleware();\n  }\n\n  _lazyLoadMiddleware (middleware) {\n    return this._lazyLoader.import(middleware.tagName.toLowerCase())\n      .then(() => {\n        return this._getMiddleware(middleware);\n      })\n      .catch(e => {\n        console.error(e);\n        alert(e.message);\n        return false;\n        // if (this.currentRoute !== 'not-found') {\n        //   this.dispatch({\n        //     type: ROUTER_ACTION.ROUTE,\n        //     route: 'not-found'\n        //   });\n        // }\n      });\n  }\n\n  _processMiddlewares (page, redirect, middlewares) {\n    middlewares.reduce((middleware, prev) => (prev && middleware && typeof middleware === 'boolean')) ? this._loadPage(page) : this._loadRedirect(redirect);\n  }\n\n  _loadRedirect (redirect) {\n    redirect ? this._loadPage(redirect) : this._loadDefaultRedirect();\n  }\n\n  _loadDefaultRedirect () {\n    const redirect = this.defaultRedirect ? document.createElement(this.defaultRedirect) : null;\n    redirect\n      ? this._loadPage(redirect)\n      : this.dispatch({\n        type: ROUTER_ACTION.ROUTE,\n        route: 'not-found'\n      });\n  }\n\n  _checkMiddlewares (route) {\n    if (this.querySelector('[slot=\"page\"]')) this.removeChild(this.querySelector('[slot=\"page\"]'));\n    const middlewares = this._getMiddlewares(route);\n    const page = document.createElement(route.page);\n    const redirect = route.redirect ? document.createElement(route.redirect) : null;\n    middlewares.length ? Promise.all(middlewares).then(this._processMiddlewares.bind(this, page, redirect)) : this._loadPage(page);\n  }\n\n  _loadPage (page) {\n    !customElements.get(page.tagName.toLowerCase()) ? this._lazyLoadPage(page) : this._showPage(page);\n  }\n\n  _lazyLoadPage (page) {\n    this._lazyLoader.import(page.tagName.toLowerCase())\n      .then(() => {\n        this._showPage(page);\n      })\n      .catch(e => {\n        if (this.currentRoute !== 'not-found') {\n          this.dispatch({\n            type: ROUTER_ACTION.ROUTE,\n            route: 'not-found'\n          });\n        }\n      });\n  }\n\n  _showPage (page) {\n    page.setAttribute('slot', 'page');\n    page.classList.add('animated');\n    page.classList.add('fadeIn');\n    this.appendChild(page);\n\n    if (window.ga) {\n      ga('set', 'page', this.path)\n      ga('send', 'pageview')\n    }\n  }\n}\n\n!customElements.get(LittleqRouter.is)\n  ? customElements.define(LittleqRouter.is, LittleqRouter)\n  : console.warn(`${LittleqRouter.is} is already defined`);\n","/* From Modernizr */\nexport default (el) => {\n  const animations = {\n    'animation': 'animationend',\n    'OAnimation': 'oAnimationEnd',\n    'MozAnimation': 'animationend',\n    'WebkitAnimation': 'webkitAnimationEnd'\n  };\n\n  for (var t in animations) {\n    if (el.style[t] !== undefined) {\n      return animations[t];\n    }\n  }\n};\n","import { reducers, store } from '@littleq/state-manager';\nimport { combineReducers } from 'redux';\n\nconst LOCATION_ACTION = {\n  PATH: 'LOCATION_UPDATE_PATH',\n  QUERY: 'LOCATION_UPDATE_QUERY',\n  HASH: 'LOCATION_UPDATE_HASH'\n};\n\nreducers.location = (location = {}, action) => {\n  switch (action.type) {\n    case LOCATION_ACTION.PATH:\n      return Object.assign({}, location, {\n        path: action.path\n      });\n    case LOCATION_ACTION.QUERY:\n      return Object.assign({}, location, {\n        query: action.query\n      });\n    case LOCATION_ACTION.HASH:\n      return Object.assign({}, location, {\n        hash: action.query\n      });\n    default:\n      return location;\n  }\n};\n\nstore.replaceReducer(combineReducers(reducers));\n\nexport { LOCATION_ACTION };\n","import { URL } from 'global/window';\nvar workingURL;\nvar urlDoc, urlBase, anchor;\n\n/**\n * @param {string} path\n * @param {string=} base\n * @return {!URL|!HTMLAnchorElement}\n */\nexport default (path, base) => {\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      var u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n      workingURL = workingURL && (new URL('http://www.google.com/?foo bar').href === 'http://www.google.com/?foo%20bar');\n    } catch (e) {}\n  }\n  if (workingURL) {\n    return new URL(path, base);\n  }\n  if (!urlDoc) {\n    urlDoc = document.implementation.createHTMLDocument('url');\n    urlBase = urlDoc.createElement('base');\n    urlDoc.head.appendChild(urlBase);\n    anchor = /** @type {HTMLAnchorElement} */(urlDoc.createElement('a'));\n  }\n  urlBase.href = base;\n  anchor.href = path.replace(/ /g, '%20');\n  return anchor;\n};\n","import { reducers, store, ReduxMixin } from '@littleq/state-manager';\nimport { combineReducers } from 'redux';\n\nconst QUERYPARAMS_ACTION = {\n  UPDATE: 'QUERYPARAMS_UPDATE'\n};\n\nreducers.query = (query = {}, action) => {\n  switch (action.type) {\n    case QUERYPARAMS_ACTION.UPDATE:\n      return Object.assign({}, query, {\n        params: action.params\n      });\n    default:\n      return query;\n  }\n};\n\nstore.replaceReducer(combineReducers(reducers));\n\nexport { QUERYPARAMS_ACTION };","import { Element } from '@polymer/polymer/polymer-element';\nimport { ReduxMixin } from '@littleq/state-manager';\nimport LocationMixin from '@littleq/location-mixin';\nimport QueryParamsMixin from '@littleq/query-params-mixin';\nimport pathToRegexp from 'path-to-regexp';\nimport { customElements } from 'global/window';\nimport { ROUTER_ACTION } from './lib/reducer';\nimport getRoutes from './lib/get-routes';\n\nclass LittleqRoute extends ReduxMixin(QueryParamsMixin(LocationMixin(Element))) {\n  static get is () { return 'littleq-route'; }\n\n  static get properties () {\n    return {\n      page: {\n        type: String\n      },\n\n      redirect: {\n        type: String\n      },\n\n      route: {\n        type: String,\n        value: 'not-found'\n      },\n\n      params: {\n        type: Object,\n        statePath: 'router.params'\n      },\n\n      currentRoute: {\n        type: String,\n        observer: '_checkRoute',\n        statePath: 'router.route'\n      }\n    };\n  }\n\n  _processPage () {\n    let router = this;\n    do {\n      router = router.parentNode;\n    } while (router.tagName.toLowerCase() !== 'littleq-router');\n    const page = router.querySelector('[slot=\"page\"]');\n    page ? router._removePage(page, this) : router._checkMiddlewares(this);\n  }\n\n  _checkRoute (route) {\n    if (route === getRoutes(this)) this._processPage();\n  }\n\n  _routeMatches (route, exec, keys) {\n    const params = {};\n    keys.forEach((key, index) => {\n      const { name } = key;\n      params[name] = exec[index + 1] || null;\n    });\n\n    this.dispatch({\n      type: ROUTER_ACTION.PARAMS,\n      params\n    });\n\n    this.dispatch({\n      type: ROUTER_ACTION.ROUTE,\n      route\n    });\n  }\n\n  _checkIfRouteMatches (path) {\n    const route = getRoutes(this);\n    const keys = [];\n    const re = pathToRegexp(route, keys);\n    const exec = re.exec(path);\n    if (exec) this._routeMatches(route, exec, keys);\n  }\n\n  _pathChanged (path) {\n    path = path.replace(/index\\.html$/, '');\n    if (this.route) this._checkIfRouteMatches(path);\n  }\n}\n\n!customElements.get(LittleqRoute.is)\n  ? customElements.define(LittleqRoute.is, LittleqRoute)\n  : console.warn(`${LittleqRoute.is} is already defined`);\n","const getRoutes = (el, route = '') => {\n  route = el.route + route;\n  return el.parentNode && el.parentNode.tagName.toLowerCase() === 'littleq-route' ? getRoutes(el.parentNode, route) : route;\n};\n\nexport default getRoutes;\n"],"sourceRoot":""}